% Trains and tests a Region-based semantic segmentation with end-to-end training on SIFT Flow.
%
% Copyright by Holger Caesar, 2016

% Settings
expNameAppend = 'testRelease';

% Define global variables
global glBaseFolder glDatasetFolder glFeaturesFolder;
glBaseFolder = 'data';
glDatasetFolder = fullfile(glBaseFolder, 'Datasets');
glFeaturesFolder = fullfile(glBaseFolder, 'Features');
dataset = SiftFlowDataset();
segmentationsFolder = fullfile(glFeaturesFolder, 'WeaklySupervisedLearning', dataset.name, 'segmentations');
labelingsFolder = fullfile(glFeaturesFolder, 'CNN-Models', 'E2S2', dataset.name, sprintf('fcn16s-%s', expNameAppend), 'labelings-test-epoch-50');

% Download dataset
downloadSiftFlow();

% Download base network
downloadNetwork();

% Download Selective Search
downloadSelectiveSearch();

% Extract region proposals (our method requires Selective Search and
% Felzenszwalb oversegmentations)
if ~exist(segmentationsFolder, 'dir')
    
    colorSpaces = {
    for colorSpace = colorSpaces
        fprintf('%s\n', colorSpace);
    end
    
    % Selective Search
    rpExtract('dataset', dataset, 'proposalName', 'Uijlings2013', 'proposalsVars', {'colorTypes', {'Rgb'}});
    rpExtract('dataset', dataset, 'proposalName', 'Uijlings2013', 'proposalsVars', {'colorTypes', {'Hsv'}});
    rpExtract('dataset', dataset, 'proposalName', 'Uijlings2013', 'proposalsVars', {'colorTypes', {'Lab'}});
    
    % Felzenszwalb
    rpExtract('dataset', dataset, 'proposalName', 'Felzenszwalb2004', 'proposalsVars', {'colorTypes', {'Rgb'}});
    rpExtract('dataset', dataset, 'proposalName', 'Felzenszwalb2004', 'proposalsVars', {'colorTypes', {'Hsv'}});
    rpExtract('dataset', dataset, 'proposalName', 'Felzenszwalb2004', 'proposalsVars', {'colorTypes', {'Lab'}});
    
    % Gound-truth
    rpExtract('dataset', dataset, 'proposalName', 'GroundTruth');
    
    % Reconstruct region proposal hierarchy
    reconstructSelSearchHierarchyFromFz('dataset', dataset, 'segmentationNameSS', 'Uijlings2013-ks100-sigma0.8-colorTypesRgb', 'segmentationNameFz', 'Felzenszwalb2004-k100-sigma0.8-colorTypesRgb');
    reconstructSelSearchHierarchyFromFz('dataset', dataset, 'segmentationNameSS', 'Uijlings2013-ks100-sigma0.8-colorTypesHsv', 'segmentationNameFz', 'Felzenszwalb2004-k100-sigma0.8-colorTypesHsv');
    reconstructSelSearchHierarchyFromFz('dataset', dataset, 'segmentationNameSS', 'Uijlings2013-ks100-sigma0.8-colorTypesLab', 'segmentationNameFz', 'Felzenszwalb2004-k100-sigma0.8-colorTypesLab');
    
    % Store GT labels for quick access
    storeLabelListGT('dataset', dataset);
    
    % Extract downsized copy of each regions mask
    e2s2_storeBlobMasks('dataset', dataset, 'proposalName', 'Uijlings2013-ks100-sigma0.8-colorTypesRgb');
    e2s2_storeBlobMasks('dataset', dataset, 'proposalName', 'Uijlings2013-ks100-sigma0.8-colorTypesHsv');
    e2s2_storeBlobMasks('dataset', dataset, 'proposalName', 'Uijlings2013-ks100-sigma0.8-colorTypesLab');
    
    e2s2_storeSPGTOverlap('dataset', dataset, 'spName', 'Felzenszwalb2004-k100-sigma0.8-colorTypesRgb');
    e2s2_storeSPGTOverlap('dataset', dataset, 'spName', 'Felzenszwalb2004-k100-sigma0.8-colorTypesHsv');
    e2s2_storeSPGTOverlap('dataset', dataset, 'spName', 'Felzenszwalb2004-k100-sigma0.8-colorTypesLab');
end

% Train and test network
e2s2_wrapper_SiftFlow();

% % Show example segmentation
% fileList = dirSubfolders(labelingsFolder);
% image = imread(fullfile(labelingsFolder, fileList{1}));
% figure();
% imshow(image);